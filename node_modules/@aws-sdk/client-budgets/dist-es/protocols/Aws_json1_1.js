import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { BudgetsServiceException as __BaseException } from "../models/BudgetsServiceException";
import { AccessDeniedException, CreationLimitExceededException, DuplicateRecordException, ExpiredNextTokenException, InternalErrorException, InvalidNextTokenException, InvalidParameterException, NotFoundException, ResourceLockedException, ServiceQuotaExceededException, ThrottlingException, } from "../models/models_0";
export const se_CreateBudgetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateBudget");
    let body;
    body = JSON.stringify(se_CreateBudgetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateBudgetActionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateBudgetAction");
    let body;
    body = JSON.stringify(se_CreateBudgetActionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateNotificationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateNotification");
    let body;
    body = JSON.stringify(se_CreateNotificationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSubscriberCommand = async (input, context) => {
    const headers = sharedHeaders("CreateSubscriber");
    let body;
    body = JSON.stringify(se_CreateSubscriberRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteBudgetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteBudget");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteBudgetActionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteBudgetAction");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteNotificationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteNotification");
    let body;
    body = JSON.stringify(se_DeleteNotificationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSubscriberCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSubscriber");
    let body;
    body = JSON.stringify(se_DeleteSubscriberRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeBudgetCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeBudget");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeBudgetActionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeBudgetAction");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeBudgetActionHistoriesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeBudgetActionHistories");
    let body;
    body = JSON.stringify(se_DescribeBudgetActionHistoriesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeBudgetActionsForAccountCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeBudgetActionsForAccount");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeBudgetActionsForBudgetCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeBudgetActionsForBudget");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeBudgetNotificationsForAccountCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeBudgetNotificationsForAccount");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeBudgetPerformanceHistoryCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeBudgetPerformanceHistory");
    let body;
    body = JSON.stringify(se_DescribeBudgetPerformanceHistoryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeBudgetsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeBudgets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeNotificationsForBudgetCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeNotificationsForBudget");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSubscribersForNotificationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSubscribersForNotification");
    let body;
    body = JSON.stringify(se_DescribeSubscribersForNotificationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ExecuteBudgetActionCommand = async (input, context) => {
    const headers = sharedHeaders("ExecuteBudgetAction");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateBudgetCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateBudget");
    let body;
    body = JSON.stringify(se_UpdateBudgetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateBudgetActionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateBudgetAction");
    let body;
    body = JSON.stringify(se_UpdateBudgetActionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateNotificationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateNotification");
    let body;
    body = JSON.stringify(se_UpdateNotificationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateSubscriberCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateSubscriber");
    let body;
    body = JSON.stringify(se_UpdateSubscriberRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CreateBudgetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateBudgetActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateNotificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateSubscriberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteBudgetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteBudgetActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteBudgetActionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteNotificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteSubscriberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeBudgetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeBudgetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeBudgetActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeBudgetActionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeBudgetActionHistoriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeBudgetActionHistoriesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeBudgetActionsForAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeBudgetActionsForAccountResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeBudgetActionsForBudgetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeBudgetActionsForBudgetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeBudgetNotificationsForAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeBudgetNotificationsForAccountResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeBudgetPerformanceHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeBudgetPerformanceHistoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeBudgetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeBudgetsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeNotificationsForBudgetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeNotificationsForBudgetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeSubscribersForNotificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ExecuteBudgetActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateBudgetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateBudgetActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateBudgetActionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateNotificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateSubscriberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "CreationLimitExceededException":
        case "com.amazonaws.budgets#CreationLimitExceededException":
            throw await de_CreationLimitExceededExceptionRes(parsedOutput, context);
        case "DuplicateRecordException":
        case "com.amazonaws.budgets#DuplicateRecordException":
            throw await de_DuplicateRecordExceptionRes(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await de_InternalErrorExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.budgets#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ResourceLockedException":
        case "com.amazonaws.budgets#ResourceLockedException":
            throw await de_ResourceLockedExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.budgets#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "ExpiredNextTokenException":
        case "com.amazonaws.budgets#ExpiredNextTokenException":
            throw await de_ExpiredNextTokenExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_CreationLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new CreationLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_DuplicateRecordExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DuplicateRecordException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ExpiredNextTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ExpiredNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalErrorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidNextTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceLockedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceLockedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_ActionThreshold = (input, context) => {
    return take(input, {
        ActionThresholdType: [],
        ActionThresholdValue: __serializeFloat,
    });
};
const se_AutoAdjustData = (input, context) => {
    return take(input, {
        AutoAdjustType: [],
        HistoricalOptions: _json,
        LastAutoAdjustTime: (_) => _.getTime() / 1_000,
    });
};
const se_Budget = (input, context) => {
    return take(input, {
        AutoAdjustData: (_) => se_AutoAdjustData(_, context),
        BillingViewArn: [],
        BudgetLimit: _json,
        BudgetName: [],
        BudgetType: [],
        CalculatedSpend: _json,
        CostFilters: _json,
        CostTypes: _json,
        FilterExpression: (_) => se_Expression(_, context),
        HealthStatus: (_) => se_HealthStatus(_, context),
        LastUpdatedTime: (_) => _.getTime() / 1_000,
        Metrics: _json,
        PlannedBudgetLimits: _json,
        TimePeriod: (_) => se_TimePeriod(_, context),
        TimeUnit: [],
    });
};
const se_CreateBudgetActionRequest = (input, context) => {
    return take(input, {
        AccountId: [],
        ActionThreshold: (_) => se_ActionThreshold(_, context),
        ActionType: [],
        ApprovalModel: [],
        BudgetName: [],
        Definition: _json,
        ExecutionRoleArn: [],
        NotificationType: [],
        ResourceTags: _json,
        Subscribers: _json,
    });
};
const se_CreateBudgetRequest = (input, context) => {
    return take(input, {
        AccountId: [],
        Budget: (_) => se_Budget(_, context),
        NotificationsWithSubscribers: (_) => se_NotificationWithSubscribersList(_, context),
        ResourceTags: _json,
    });
};
const se_CreateNotificationRequest = (input, context) => {
    return take(input, {
        AccountId: [],
        BudgetName: [],
        Notification: (_) => se_Notification(_, context),
        Subscribers: _json,
    });
};
const se_CreateSubscriberRequest = (input, context) => {
    return take(input, {
        AccountId: [],
        BudgetName: [],
        Notification: (_) => se_Notification(_, context),
        Subscriber: _json,
    });
};
const se_DeleteNotificationRequest = (input, context) => {
    return take(input, {
        AccountId: [],
        BudgetName: [],
        Notification: (_) => se_Notification(_, context),
    });
};
const se_DeleteSubscriberRequest = (input, context) => {
    return take(input, {
        AccountId: [],
        BudgetName: [],
        Notification: (_) => se_Notification(_, context),
        Subscriber: _json,
    });
};
const se_DescribeBudgetActionHistoriesRequest = (input, context) => {
    return take(input, {
        AccountId: [],
        ActionId: [],
        BudgetName: [],
        MaxResults: [],
        NextToken: [],
        TimePeriod: (_) => se_TimePeriod(_, context),
    });
};
const se_DescribeBudgetPerformanceHistoryRequest = (input, context) => {
    return take(input, {
        AccountId: [],
        BudgetName: [],
        MaxResults: [],
        NextToken: [],
        TimePeriod: (_) => se_TimePeriod(_, context),
    });
};
const se_DescribeSubscribersForNotificationRequest = (input, context) => {
    return take(input, {
        AccountId: [],
        BudgetName: [],
        MaxResults: [],
        NextToken: [],
        Notification: (_) => se_Notification(_, context),
    });
};
const se_Expression = (input, context) => {
    return take(input, {
        And: (_) => se_Expressions(_, context),
        CostCategories: _json,
        Dimensions: _json,
        Not: (_) => se_Expression(_, context),
        Or: (_) => se_Expressions(_, context),
        Tags: _json,
    });
};
const se_Expressions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Expression(entry, context);
    });
};
const se_HealthStatus = (input, context) => {
    return take(input, {
        LastUpdatedTime: (_) => _.getTime() / 1_000,
        Status: [],
        StatusReason: [],
    });
};
const se_Notification = (input, context) => {
    return take(input, {
        ComparisonOperator: [],
        NotificationState: [],
        NotificationType: [],
        Threshold: __serializeFloat,
        ThresholdType: [],
    });
};
const se_NotificationWithSubscribers = (input, context) => {
    return take(input, {
        Notification: (_) => se_Notification(_, context),
        Subscribers: _json,
    });
};
const se_NotificationWithSubscribersList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_NotificationWithSubscribers(entry, context);
    });
};
const se_TimePeriod = (input, context) => {
    return take(input, {
        End: (_) => _.getTime() / 1_000,
        Start: (_) => _.getTime() / 1_000,
    });
};
const se_UpdateBudgetActionRequest = (input, context) => {
    return take(input, {
        AccountId: [],
        ActionId: [],
        ActionThreshold: (_) => se_ActionThreshold(_, context),
        ApprovalModel: [],
        BudgetName: [],
        Definition: _json,
        ExecutionRoleArn: [],
        NotificationType: [],
        Subscribers: _json,
    });
};
const se_UpdateBudgetRequest = (input, context) => {
    return take(input, {
        AccountId: [],
        NewBudget: (_) => se_Budget(_, context),
    });
};
const se_UpdateNotificationRequest = (input, context) => {
    return take(input, {
        AccountId: [],
        BudgetName: [],
        NewNotification: (_) => se_Notification(_, context),
        OldNotification: (_) => se_Notification(_, context),
    });
};
const se_UpdateSubscriberRequest = (input, context) => {
    return take(input, {
        AccountId: [],
        BudgetName: [],
        NewSubscriber: _json,
        Notification: (_) => se_Notification(_, context),
        OldSubscriber: _json,
    });
};
const de_Action = (output, context) => {
    return take(output, {
        ActionId: __expectString,
        ActionThreshold: (_) => de_ActionThreshold(_, context),
        ActionType: __expectString,
        ApprovalModel: __expectString,
        BudgetName: __expectString,
        Definition: _json,
        ExecutionRoleArn: __expectString,
        NotificationType: __expectString,
        Status: __expectString,
        Subscribers: _json,
    });
};
const de_ActionHistories = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ActionHistory(entry, context);
    });
    return retVal;
};
const de_ActionHistory = (output, context) => {
    return take(output, {
        ActionHistoryDetails: (_) => de_ActionHistoryDetails(_, context),
        EventType: __expectString,
        Status: __expectString,
        Timestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ActionHistoryDetails = (output, context) => {
    return take(output, {
        Action: (_) => de_Action(_, context),
        Message: __expectString,
    });
};
const de_Actions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Action(entry, context);
    });
    return retVal;
};
const de_ActionThreshold = (output, context) => {
    return take(output, {
        ActionThresholdType: __expectString,
        ActionThresholdValue: __limitedParseDouble,
    });
};
const de_AutoAdjustData = (output, context) => {
    return take(output, {
        AutoAdjustType: __expectString,
        HistoricalOptions: _json,
        LastAutoAdjustTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Budget = (output, context) => {
    return take(output, {
        AutoAdjustData: (_) => de_AutoAdjustData(_, context),
        BillingViewArn: __expectString,
        BudgetLimit: _json,
        BudgetName: __expectString,
        BudgetType: __expectString,
        CalculatedSpend: _json,
        CostFilters: _json,
        CostTypes: _json,
        FilterExpression: (_) => de_Expression(_, context),
        HealthStatus: (_) => de_HealthStatus(_, context),
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Metrics: _json,
        PlannedBudgetLimits: _json,
        TimePeriod: (_) => de_TimePeriod(_, context),
        TimeUnit: __expectString,
    });
};
const de_BudgetedAndActualAmounts = (output, context) => {
    return take(output, {
        ActualAmount: _json,
        BudgetedAmount: _json,
        TimePeriod: (_) => de_TimePeriod(_, context),
    });
};
const de_BudgetedAndActualAmountsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BudgetedAndActualAmounts(entry, context);
    });
    return retVal;
};
const de_BudgetNotificationsForAccount = (output, context) => {
    return take(output, {
        BudgetName: __expectString,
        Notifications: (_) => de_Notifications(_, context),
    });
};
const de_BudgetNotificationsForAccountList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BudgetNotificationsForAccount(entry, context);
    });
    return retVal;
};
const de_BudgetPerformanceHistory = (output, context) => {
    return take(output, {
        BillingViewArn: __expectString,
        BudgetName: __expectString,
        BudgetType: __expectString,
        BudgetedAndActualAmountsList: (_) => de_BudgetedAndActualAmountsList(_, context),
        CostFilters: _json,
        CostTypes: _json,
        TimeUnit: __expectString,
    });
};
const de_Budgets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Budget(entry, context);
    });
    return retVal;
};
const de_DeleteBudgetActionResponse = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        Action: (_) => de_Action(_, context),
        BudgetName: __expectString,
    });
};
const de_DescribeBudgetActionHistoriesResponse = (output, context) => {
    return take(output, {
        ActionHistories: (_) => de_ActionHistories(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeBudgetActionResponse = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        Action: (_) => de_Action(_, context),
        BudgetName: __expectString,
    });
};
const de_DescribeBudgetActionsForAccountResponse = (output, context) => {
    return take(output, {
        Actions: (_) => de_Actions(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeBudgetActionsForBudgetResponse = (output, context) => {
    return take(output, {
        Actions: (_) => de_Actions(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeBudgetNotificationsForAccountResponse = (output, context) => {
    return take(output, {
        BudgetNotificationsForAccount: (_) => de_BudgetNotificationsForAccountList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeBudgetPerformanceHistoryResponse = (output, context) => {
    return take(output, {
        BudgetPerformanceHistory: (_) => de_BudgetPerformanceHistory(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeBudgetResponse = (output, context) => {
    return take(output, {
        Budget: (_) => de_Budget(_, context),
    });
};
const de_DescribeBudgetsResponse = (output, context) => {
    return take(output, {
        Budgets: (_) => de_Budgets(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeNotificationsForBudgetResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Notifications: (_) => de_Notifications(_, context),
    });
};
const de_Expression = (output, context) => {
    return take(output, {
        And: (_) => de_Expressions(_, context),
        CostCategories: _json,
        Dimensions: _json,
        Not: (_) => de_Expression(_, context),
        Or: (_) => de_Expressions(_, context),
        Tags: _json,
    });
};
const de_Expressions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Expression(entry, context);
    });
    return retVal;
};
const de_HealthStatus = (output, context) => {
    return take(output, {
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        StatusReason: __expectString,
    });
};
const de_Notification = (output, context) => {
    return take(output, {
        ComparisonOperator: __expectString,
        NotificationState: __expectString,
        NotificationType: __expectString,
        Threshold: __limitedParseDouble,
        ThresholdType: __expectString,
    });
};
const de_Notifications = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Notification(entry, context);
    });
    return retVal;
};
const de_TimePeriod = (output, context) => {
    return take(output, {
        End: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Start: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_UpdateBudgetActionResponse = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        BudgetName: __expectString,
        NewAction: (_) => de_Action(_, context),
        OldAction: (_) => de_Action(_, context),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSBudgetServiceGateway.${operation}`,
    };
}
