version: '3.8'

# StackPro Local Development Environment
# Run: docker-compose -f docker-compose.dev.yml up

services:
  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: stackpro_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3002
      - NEXT_PUBLIC_WS_URL=ws://localhost:3002
      - NEXT_PUBLIC_ENV=development
      - NEXT_PUBLIC_FREE_TIER=true
      - CHOKIDAR_USEPOLLING=true
    networks:
      - stackpro_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Express Backend API
  backend:
    build:
      context: ./src
      dockerfile: Dockerfile.dev
    container_name: stackpro_backend
    ports:
      - "3002:3002"
    volumes:
      - ./src:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DATABASE_URL=postgresql://stackpro:stackpro123@postgres:5432/stackpro_dev
      - JWT_SECRET=dev-secret-key-change-in-production
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - AWS_REGION=us-west-2
      - AI_ENABLED=false
    networks:
      - stackpro_network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stackpro_postgres
    environment:
      POSTGRES_DB: stackpro_dev
      POSTGRES_USER: stackpro
      POSTGRES_PASSWORD: stackpro123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/sql/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - stackpro_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stackpro -d stackpro_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching & Sessions
  redis:
    image: redis:7-alpine
    container_name: stackpro_redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - stackpro_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Amplify Local Sandbox (for backend development)
  amplify-sandbox:
    build:
      context: ./frontend
      dockerfile: Dockerfile.amplify
    container_name: stackpro_amplify_sandbox
    ports:
      - "4566:4566"  # LocalStack port
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-west-2
    networks:
      - stackpro_network
    restart: unless-stopped
    command: ["npx", "ampx", "sandbox", "--once"]

  # Database Admin Interface (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: stackpro_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@stackpro.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8080:80"
    networks:
      - stackpro_network
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  stackpro_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
