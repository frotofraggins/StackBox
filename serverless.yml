service: stackpro-backend

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-2
  stage: ${opt:stage, 'dev'}
  memorySize: 256
  timeout: 30
  environment:
    NODE_ENV: ${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET}
    STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY}
    CLAUDE_API_KEY: ${env:CLAUDE_API_KEY}
    USERS_TABLE: ${self:service}-users-${self:provider.stage}
    PROJECTS_TABLE: ${self:service}-projects-${self:provider.stage}
    SESSIONS_TABLE: ${self:service}-sessions-${self:provider.stage}
    FILES_BUCKET: ${self:service}-files-${self:provider.stage}
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-*"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            - "arn:aws:s3:::${self:service}-files-${self:provider.stage}/*"

functions:
  # Auth Service
  auth:
    handler: src/lambda/auth.handler
    events:
      - http:
          path: /auth/{proxy+}
          method: ANY
          cors: true

  # Users Service
  users:
    handler: src/lambda/users.handler
    events:
      - http:
          path: /users/{proxy+}
          method: ANY
          cors: true

  # Projects Service
  projects:
    handler: src/lambda/projects.handler
    events:
      - http:
          path: /projects/{proxy+}
          method: ANY
          cors: true

  # Payments Service
  payments:
    handler: src/lambda/payments.handler
    events:
      - http:
          path: /payments/{proxy+}
          method: ANY
          cors: true

  # AI Service
  ai:
    handler: src/lambda/ai.handler
    events:
      - http:
          path: /ai/{proxy+}
          method: ANY
          cors: true

resources:
  Resources:
    # DynamoDB Tables (Free Tier Optimized)
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-users-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    ProjectsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-projects-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: projectId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: projectId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    SessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-sessions-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: sessionId
            AttributeType: S
        KeySchema:
          - AttributeName: sessionId
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    # S3 Bucket for File Storage
    FilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-files-${self:provider.stage}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
              AllowedOrigins: ['*']
              MaxAge: 3000
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        VersioningConfiguration:
          Status: Enabled
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldVersions
              Status: Enabled
              NoncurrentVersionExpirationInDays: 30

    # CloudWatch Log Groups
    AuthLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-auth
        RetentionInDays: 14

    UsersLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-users
        RetentionInDays: 14

    ProjectsLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-projects
        RetentionInDays: 14

    PaymentsLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-payments
        RetentionInDays: 14

    AILogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-ai
        RetentionInDays: 14

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-restApiId

    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:service}-${self:provider.stage}-rootResourceId

    UsersTableName:
      Value:
        Ref: UsersTable
      Export:
        Name: ${self:service}-${self:provider.stage}-UsersTableName

    ProjectsTableName:
      Value:
        Ref: ProjectsTable
      Export:
        Name: ${self:service}-${self:provider.stage}-ProjectsTableName

    FilesBucketName:
      Value:
        Ref: FilesBucket
      Export:
        Name: ${self:service}-${self:provider.stage}-FilesBucketName

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  serverless-offline:
    httpPort: 3001
    host: 0.0.0.0
